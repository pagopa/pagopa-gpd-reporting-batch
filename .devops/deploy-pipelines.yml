parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: TEST
    displayName: Run tests
    type: boolean
    default: false

variables:
  REPOSITORY: reporting-batch

  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(DEV_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(DEV_WEB_APP_NAME)
    STAGE: "d"
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY)
    dockerNamespace: $(DEV_CONTAINER_NAMESPACE)

  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(UAT_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(UAT_WEB_APP_NAME)
    STAGE: "u"
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY)
    dockerNamespace: $(UAT_CONTAINER_NAMESPACE)

  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    RESOURCE_GROUP: $(PROD_WEB_APP_RESOURCE_GROUP_NAME)
    APP_NAME: $(PROD_WEB_APP_NAME)
    STAGE: "p"
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY)
    dockerNamespace: $(PROD_CONTAINER_NAMESPACE)

  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: ${{ variables['Build.SourceBranchName'] }}



  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.10.1
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: Release
    jobs:
      - job: make_release
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - ${{ if ne(parameters.SEMVER, 'skip') }}:
              - template: templates/maven-github-release/template.yaml@pagopaCommons
                parameters:
                  release_branch: $(sourceBranch)
                  gitEmail: $(GIT_EMAIL)
                  gitUsername: $(GIT_USERNAME)
                  gitHubConnection: $(GITHUB_CONNECTION)
                  ${{ if ne(parameters.SEMVER, 'skip') }}:
                    semver: '${{ parameters.SEMVER }}'
                  ${{ if eq(parameters.SEMVER, 'skip') }}:
                    semver: 'buildNumber' # this case is impossible due to main condition, but it is necessary to work property

          - template: templates/maven-github-current-version/template.yaml@pagopaCommons

  # Deploy on Azure
  - stage: deploy
    condition: not(failed('releaseService'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: deployJava
        steps:

          - script: |
              echo ${{variables['Build.SourceBranchName']}}        
              echo $(SOURCE_BRANCH)
              echo $(TEST)

          - checkout: self
            clean: true
            persistCredentials: true
            submodules: true

          - script: |
              echo "Checkout on $(SOURCE_BRANCH)"
              git checkout $(SOURCE_BRANCH)
            displayName: Checkout on source branch

          #          - task: Bash@3
          #            name: application_properties
          #            inputs:
          #              targetType: "inline"
          #              script: |
          #                cp src/main/resources/application-azure-$(STAGE).properties src/main/resources/application.properties
          #                cat src/main/resources/application.properties
          #              failOnStderr: true

          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Set Maven Cache

          - task: Bash@3
            # When the maven task is installed, mvn can be used in a script
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              mavenVersionOption: 'Default'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(IMAGE_REPOSITORY)'
              command: 'buildAndPush'
              Dockerfile: './${{ variables.REPOSITORY }}/Dockerfile.deploy'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion.next)

          # deploy reporting-fn
          - task: AzureFunctionAppContainer@1
            displayName: Deploy Function App [DEV|UAT]
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "${{variables.APP_NAME}}-fn-gpd-batch"
              imageName: "${{variables.CONTAINER_NAMESPACE}}/${{ variables.REPOSITORY }}:$(Build.BuildId)"
              slotName: production
          - task: AzureFunctionAppContainer@1
            displayName: Deploy Function App [PROD]
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "${{variables.APP_NAME}}-fn-${{replace(variables.REPOSITORY, 'reporting', 'gpd')}}"
              imageName: "${{variables.CONTAINER_NAMESPACE}}/${{ variables.REPOSITORY }}:$(Build.BuildId)"
              deployToSlotOrASE: true
              slotName: staging
              resourceGroupName: $(RESOURCE_GROUP)

          - script: |
              echo "##vso[task.setvariable variable=version;isOutput=true]$(pomversion.next)"
            name: dockerTag


#  # Run test
#  - stage: test
#    # run this stage only if 'test' is enabled
#    condition: and(not(failed('deployJava')), eq('${{ parameters.TEST }}', 'true'))
#    pool:
#      vmImage: "ubuntu-latest"
#    jobs:
#      # is needed to wait for startup of application
#      - job: waitStartup
#        pool: Server
#        steps:
#          - task: Delay@1
#            inputs:
#              delayForMinutes: '10'
#
#      #      - job: integrationTests
#      #        dependsOn: waitStartup
#      #        steps:
#      #          - script: |
#      #              git checkout $(SOURCE_BRANCH)
#
#      #          - script: |
#      #              yarn global add newman
#      #            displayName: 'newman installation'
#
#      #          - script: |
#      #              newman run api-test/Project.postman_collection.json --environment=api-test/Azure.postman_environment.json --reporters cli,junit --reporter-junit-export Results/api-config-TEST.xml --verbose
#      #            displayName: 'Run api test'
#      #            continueOnError: false
#
#      #          - task: PublishTestResults@2
#      #            condition: always()
#      #            inputs:
#      #              testResultsFormat: 'JUnit'
#      #              testResultsFiles: '**/*-TEST.xml'
#      #              searchFolder: '$(System.DefaultWorkingDirectory)'
#
#      - job: deployUAT
#        dependsOn: integrationTests
#        variables:
#          version: $[ stageDependencies.deploy.deployJava.outputs['dockerTag.version'] ]
#        steps:
#          - task: Maven@3
#            inputs:
#              mavenPomFile: 'pom.xml'
#              publishJUnitResults: false
#              javaHomeOption: 'JDKVersion'
#              jdkVersionOption: '1.11'
#              mavenVersionOption: 'Default'
#              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
#              mavenAuthenticateFeed: false
#              effectivePomSkip: false
#              sonarQubeRunAnalysis: false
#
#          - task: Docker@2
#            displayName: Build and push an image to UAT container registry
#            inputs:
#              containerRegistry: '$(UAT_CONTAINER_REGISTRY)'
#              repository: '$(IMAGE_REPOSITORY)'
#              command: 'buildAndPush'
#              tags: |
#                $(Build.BuildId)
#                latest
#                $(version)
#
#          # deploy project-fn
#          - task: AzureFunctionAppContainer@1
#            displayName: Deploy Function App [UAT]
#            condition: in('${{ parameters.ENV }}', 'uat')
#            inputs:
#              azureSubscription: $(AZURE_SUBSCRIPTION)
#              appName: "${{variables.UAT_WEB_APP_NAME}}-fn-project}"
#              imageName: "${{variables.UAT_CONTAINER_NAMESPACE}}/project:$(Build.BuildId)"
#              slotName: production